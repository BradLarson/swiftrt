//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation

// gyb utility docs
// https://nshipster.com/swift-gyb/
%{
numShapes = 6
}%

//******************************************************************************
//
// DO NOT EDIT. THIS FILE IS GENERATED FROM .swift.gyb file
//
//******************************************************************************

//==============================================================================
/// array
/// Return a new tensor of given shape and type, without initializing entries.
/// - Parameters:
///  - elements: a collection of elements used to initialize storage
///  - shape: Int or tuple of Int describing the dimensions of the array
///  - dtype: data-type, optional
///    Desired output data-type for the array, e.g, Int8. Default is DType.
///  - order: { .C, .F }, optional, default .C
///    Whether to store multi-dimensional data in row-major (C-style)
///    or column-major (Fortran-style) order in memory.
/// - Returns: Tensor of uninitialized (arbitrary) data of the given shape,
///   dtype, and order. Elements will not be initialized.

//------------------------------------------------------------------------------
// Rank1 array from a flat collection where shape is implied by count
// same type
@inlinable public func array<C>(
    _ elements: C,
    order: StorageOrder = .C
) -> Tensor1<C.Element> where C: Collection
{
    Tensor1(elements, Shape1(elements.count), order: order)
}

/// implicitly casts from C.Element integer -> DType
@inlinable public func array<C>(
    _ elements: C,
    order: StorageOrder = .C
) -> Tensor1<DType> where C: Collection, C.Element: BinaryInteger
{
    Tensor1(elements, Shape1(elements.count), order: order)
}

/// implicitly casts from C.Element integer -> Element
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor1<Element>
    where C: Collection, C.Element: BinaryInteger, Element: Numeric
{
    Tensor1<Element>(elements, Shape1(elements.count), order: order)
}

/// implicitly casts from C.Element float -> Element integer
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor1<Element>
    where C: Collection, C.Element: BinaryFloatingPoint, Element: BinaryInteger
{
    Tensor1<Element>(elements, Shape1(elements.count), order: order)
}

/// implicitly casts from C.Element float -> Element float
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor1<Element>
    where C: Collection, C.Element: BinaryFloatingPoint, Element: BinaryFloatingPoint
{
    Tensor1<Element>(elements, Shape1(elements.count), order: order)
}

%for n in range(2, numShapes + 1):
//------------------------------------------------------------------------------
// Rank${n} shaped array from a flat collection
// same type
@inlinable public func array<C>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    order: StorageOrder = .C
) -> Tensor${n}<C.Element> where C: Collection
{
    Tensor${n}(elements, Shape${n}(shape), order: order)
}

/// implicitly casts from C.Element integer -> DType
@inlinable public func array<C>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    order: StorageOrder = .C
) -> Tensor${n}<DType> where C: Collection, C.Element: BinaryInteger
{
    Tensor${n}(elements, Shape${n}(shape), order: order)
}

/// implicitly casts from C.Element integer -> Element
@inlinable public func array<C, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where C: Collection, C.Element: BinaryInteger, Element: Numeric
{
    Tensor${n}<Element>(elements, Shape${n}(shape), order: order)
}

/// implicitly casts from C.Element float -> Element integer
@inlinable public func array<C, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where C: Collection, C.Element: BinaryFloatingPoint, Element: BinaryInteger
{
    Tensor${n}<Element>(elements, Shape${n}(shape), order: order)
}

/// implicitly casts from C.Element float -> Element float
@inlinable public func array<C, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where C: Collection, C.Element: BinaryFloatingPoint,
    Element: BinaryFloatingPoint
{
    Tensor${n}<Element>(elements, Shape${n}(shape), order: order)
}

%end

%for n in range(2, numShapes + 1):
//------------------------------------------------------------------------------
// Rank${n} shaped array from a flat collection
// same type
@inlinable public func array<C>(
    _ elements: C,
    order: StorageOrder = .C
) -> Tensor${n}<C${''.join(['.Element' * n])}>
    where
% for i in range(n):
    C${''.join(['.Element' * i])}: Collection${',' if i < n - 1 else ''}
% end
{
    let shape = Shape${n}(
% for i in range(n):
        elements${"".join([".first!" * i])}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${"".join([".joined()" * (n - 1)])}
    return Tensor${n}<C${''.join(['.Element' * n])}>(
        flatElements, shape, order: order)
}

/// implicitly casts from C.Element integer -> DType
@inlinable public func array<C>(
    _ elements: C,
    order: StorageOrder = .C
) -> Tensor${n}<DType>
    where
% for i in range(n):
    C${''.join(['.Element' * i])}: Collection,
% end
    C${''.join(['.Element' * n])}: BinaryInteger
{
    let shape = Shape${n}(
% for i in range(n):
        elements${"".join([".first!" * i])}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${"".join([".joined()" * (n - 1)])}
    return Tensor${n}<DType>(flatElements, shape, order: order)
}

/// implicitly casts from C.Element integer -> Element
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where
% for i in range(n):
    C${''.join(['.Element' * i])}: Collection,
% end
    C${''.join(['.Element' * n])}: BinaryInteger, Element: Numeric
{
    let shape = Shape${n}(
% for i in range(n):
        elements${"".join([".first!" * i])}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${"".join([".joined()" * (n - 1)])}
    return Tensor${n}<Element>(flatElements, shape, order: order)
}

/// implicitly casts from C.Element float -> Element integer
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where
% for i in range(n):
    C${''.join(['.Element' * i])}: Collection,
% end
    C${''.join(['.Element' * n])}: BinaryFloatingPoint, Element: BinaryInteger
{
    let shape = Shape${n}(
% for i in range(n):
        elements${"".join([".first!" * i])}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${"".join([".joined()" * (n - 1)])}
    return Tensor${n}<Element>(flatElements, shape, order: order)
}

/// implicitly casts from C.Element float -> Element float
@inlinable public func array<C, Element>(
    _ elements: C,
    dtype: Element.Type,
    order: StorageOrder = .C
) -> Tensor${n}<Element>
    where
% for i in range(n):
    C${''.join(['.Element' * i])}: Collection,
% end
    C${''.join(['.Element' * n])}: BinaryFloatingPoint,
    Element: BinaryFloatingPoint
{
    let shape = Shape${n}(
% for i in range(n):
        elements${"".join([".first!" * i])}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${"".join([".joined()" * (n - 1)])}
    return Tensor${n}<Element>(flatElements, shape, order: order)
}

%end
