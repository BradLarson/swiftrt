//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// gyb utility docs
// https://nshipster.com/swift-gyb/
%{
numShapes = 6
}%

//******************************************************************************
//
// DO NOT EDIT. THIS FILE IS GENERATED FROM .swift.gyb file
//
//******************************************************************************

//==============================================================================
/// repeating
/// Return a new tensor of given shape and type repeating `value`
/// - Parameters:
///  - value: element or other lower order tensor to repeat
///  - shape: Int or tuple of Int. Shape of the array, e.g., (2, 3) or 2.
///  - dtype: data-type, optional
///    Desired output data-type for the array, e.g, Int8. Default is DType.
/// - Returns: read only broadcasted element or other lower order tensor

%for n in range(1, numShapes + 1):
//---------------------------------------
// Rank${n}
@inlinable public func repeating(
    _ value: DType,
    _ shape: Shape${n}.Tuple
) -> Tensor${n}<DType> {
   Tensor${n}<DType>(repeating: value, to: Shape${n}(shape))
}

@inlinable public func repeating<Element>(
    _ value: Element,
    _ shape: Shape${n}.Tuple,
    dtype: Element.Type
) -> Tensor${n}<Element> {
    Tensor${n}<Element>(repeating: value, to: Shape${n}(shape))
}

%end

//==============================================================================
/// repeating(value:like:
/// Return a new tensor of given shape and type repeating `value`
/// - Parameters:
///  - value: element or other lower order tensor to repeat
///  - prototype: unspecified attributes are copied from this tensor
///  - dtype: data-type, optional
///    Desired output data-type for the array, e.g, Int8. Default is DType.
///  - shape: Int or tuple of Int. Shape of the array, e.g., (2, 3) or 2.
/// - Returns: read only broadcasted element or other lower order tensor

// same type and shape
@inlinable public func repeating<S,E>(
    _ value: E,
    like prototype: Tensor<S,E>
) -> Tensor<S,E> where S: TensorShape
{
    Tensor<S,E>(repeating: value, to: prototype.shape)
}

// different type same shape
@inlinable public func repeating<S,E, Element>(
    _ value: Element,
    like prototype: Tensor<S,E>,
    dtype: Element.Type
) -> Tensor<S, Element> where S: TensorShape
{
    Tensor<S, Element>(repeating: value, to: prototype.shape)
}

//------------------------------------------------------------------------------
// same type different shape
%for n in range(1, numShapes + 1):
// Rank${n}
@inlinable public func repeating<S,E>(
    _ value: E,
    like prototype: Tensor<S,E>,
    shape: Shape${n}.Tuple
) -> Tensor<Shape${n}, E> where S: TensorShape
{
    assert(prototype.elementCount == Shape${n}(shape).elementCount())
    return Tensor<Shape${n}, E>(repeating: value, to: Shape${n}(shape))
}

%end

//------------------------------------------------------------------------------
// different type, different shape
%for n in range(1, numShapes + 1):
// Rank${n}
@inlinable public func repeating<S,E,Element>(
    _ value: Element,
    like prototype: Tensor<S,E>,
    dtype: Element.Type,
    shape: Shape${n}.Tuple
) -> Tensor<Shape${n}, Element> where S: TensorShape
{
    assert(prototype.elementCount == Shape${n}(shape).elementCount())
    return Tensor<Shape${n}, Element>(repeating: value, to: Shape${n}(shape))
}

%end

