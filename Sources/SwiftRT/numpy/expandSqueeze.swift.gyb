//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Foundation

// gyb utility docs
// https://nshipster.com/swift-gyb/
%{
numShapes = 6
}%

//******************************************************************************
//
// DO NOT EDIT. THIS FILE IS GENERATED FROM .swift.gyb file
//
//******************************************************************************

/// expand
/// Expands the shape of a tensor by inserting a new axis that will
/// appear at the axis position in the expanded array shape
/// - Parameters:
///  - dims a: input array
///  - axis: the set of axes to expand in the new shape
///
%for n in range(1, numShapes):
//==============================================================================
// Rank${n}
//@differentiable(where E: DifferentiableElement)
@inlinable public func expand<E>(dims a: Tensor${n}<E>, axis: Int) -> Tensor${n + 1}<E> {
    Tensor${n + 1}<E>(expanding: a, axes: Shape1(axis))
}

% for i in range(2, numShapes + 1 - n):
//@differentiable(where E: DifferentiableElement)
@inlinable public func expand<E>(dims a: Tensor${n}<E>, axes: Shape${i}.Tuple) -> Tensor${n + i}<E> {
    Tensor${n + i}<E>(expanding: a, axes: Shape${i}(axes))
}

% end
%end

/// squeeze
/// Remove length one entries from the shape of a tensor
/// - Parameters:
///  - a: input array
///  - axis: the set of axes to squeeze in the shape
///
%for n in range(2, numShapes + 1):
//==============================================================================
// Rank${n}
//@differentiable(where E: DifferentiableElement)
@inlinable public func squeeze<E>(_ a: Tensor${n}<E>, axis: Int) -> Tensor${n - 1}<E> {
    Tensor${n - 1}<E>(squeezing: a, axes: Shape1(axis))
}

% for i in range(2, n):
//@differentiable(where E: DifferentiableElement)
@inlinable public func squeeze<E>(_ a: Tensor${n}<E>, axes: Shape${i}.Tuple) -> Tensor${n - i}<E> {
    Tensor${n - i}<E>(squeezing: a, axes: Shape${i}(axes))
}

% end
%end
