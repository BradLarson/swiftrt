//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Numerics

public typealias ParameterInitializer<T> = (T.Bounds) -> T
    where T: TensorView

/// Returns a function that creates a tensor by initializing
/// all its values to zeros.
public func zeros<T>() -> ParameterInitializer<T>
    where T: TensorView, T.Element: Numeric
{
    { T(zeros: $0) }
}

/// Returns a function that creates a tensor by initializing
/// all its values to the provided value.
public func constantInitializer<T>(value: T.Element) -> ParameterInitializer<T>
    where T: TensorView
{
    { T(repeating: value, to: $0) }
}

/// Returns a function that creates a tensor by initializing it to
/// the provided value. Note that broadcasting of the provided value
/// is *not* supported.
public func constantInitializer<T>(value: T) -> ParameterInitializer<T> {
    {
        precondition(value.bounds == $0,
            "The constant tensor bounds (\(value.bounds)) " +
            "must match the requested bounds \($0).")
        return value
    }
}

/// Returns a function that creates a tensor by performing Glorot (Xavier)
/// uniform initialization for the specified shape, randomly sampling scalar
/// values from a uniform distribution between `-limit` and `limit`,
/// generated by the default random number generator, where limit is
/// `sqrt(6 / (fanIn + fanOut))`, and `fanIn`/`fanOut` represent the number of
/// input and output features multiplied by the receptive field, if present.
public func glorotUniform<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(glorotUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing Glorot (Xavier)
/// normal initialization for the specified shape, randomly sampling scalar
/// values from a truncated normal distribution centered on `0` with standard
/// deviation `sqrt(2 / (fanIn + fanOut))`, where `fanIn`/`fanOut` represent
/// the number of input and output features multiplied by the receptive
/// field size, if present.
public func glorotNormal<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(glorotNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing He (Kaiming)
/// uniform initialization for the specified shape, randomly sampling scalar
/// values from a uniform distribution between `-limit`and `limit`, generated
///  by the default random number generator, where limit is
/// `sqrt(6 / fanIn)`, and `fanIn` represents the number of input features
/// multiplied by the receptive field, if present.
public func heUniform<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(heUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing He (Kaiming)
/// normal initialization for the specified shape, randomly sampling scalar
/// values from a truncated normal distribution centered on `0` with standard
/// deviation `sqrt(2 / fanIn)`, where `fanIn` represents the number of input
/// features multiplied by the receptive field size, if present.
public func heNormal<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(heNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing LeCun uniform
/// initialization for the specified shape, randomly sampling scalar values
/// from a uniform distribution between `-limit` and `limit`, generated by the
/// default random number generator, where limit is
/// `sqrt(3 / fanIn)`, and `fanIn` represents the number of input features
/// multiplied by the receptive field, if present.
public func leCunUniform<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(leCunUniform: $0, seed: seed) }
}

/// Returns a function that creates a tensor by performing LeCun normal
/// initialization for the specified shape, randomly sampling scalar values
/// from a truncated normal distribution centered on `0` with standard
/// deviation `sqrt(1 / fanIn)`, where `fanIn` represents the number of input
/// features multiplied by the receptive field size, if present.
public func leCunNormal<T>(seed: RandomSeed = Context.randomSeed)
    -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    { T(leCunNormal: $0, seed: seed) }
}

/// Returns a function that creates a tensor by initializing all its values
/// randomly from a truncated Normal distribution. The generated values
/// follow a Normal distribution with mean `mean` and standard deviation
///  `standardDeviation`, except that values whose magnitude is more
/// than two standard deviations from the mean are dropped and resampled.
///
/// - Parameters:
///   - mean: Mean of the Normal distribution.
///   - standardDeviation: Standard deviation of the Normal distribution.
///
///- Returns: A truncated normal parameter initializer function.
public func truncatedNormalInitializer<T>(
    mean: T = T(0),
    standardDeviation: T = T(1),
    seed: RandomSeed = Context.randomSeed) -> ParameterInitializer<T>
    where T: TensorView, T.Element: Real & BinaryFloatingPoint
{
    {
        T(randomTruncatedNormal: $0,
          mean: mean,
          standardDeviation: standardDeviation,
          seed: seed)
    }
}
